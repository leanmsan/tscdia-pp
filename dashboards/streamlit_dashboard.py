"""
Dashboard ejemplo usando Streamlit
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="TSCDIA Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üìä Dashboard TSCDIA - An√°lisis de Datos")
st.markdown("---")

# Sidebar
st.sidebar.header("üîß Configuraci√≥n")
st.sidebar.markdown("Selecciona las opciones para personalizar el an√°lisis")

# Ejemplo de datos (reemplazar con datos reales)
@st.cache_data
def load_data():
    """Cargar datos de ejemplo"""
    np.random.seed(42)
    data = {
        'fecha': pd.date_range('2024-01-01', periods=100),
        'ventas': np.random.normal(1000, 200, 100),
        'categoria': np.random.choice(['A', 'B', 'C', 'D'], 100),
        'region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], 100),
        'satisfaccion': np.random.uniform(1, 5, 100)
    }
    return pd.DataFrame(data)

# Cargar datos
df = load_data()

# Filtros en sidebar
st.sidebar.subheader("üìÖ Filtros de Fecha")
date_range = st.sidebar.date_input(
    "Seleccionar rango de fechas",
    value=(df['fecha'].min(), df['fecha'].max()),
    min_value=df['fecha'].min(),
    max_value=df['fecha'].max()
)

st.sidebar.subheader("üè∑Ô∏è Filtros de Categor√≠a")
categorias = st.sidebar.multiselect(
    "Seleccionar categor√≠as",
    options=df['categoria'].unique(),
    default=df['categoria'].unique()
)

# Aplicar filtros
filtered_df = df[
    (df['fecha'] >= pd.to_datetime(date_range[0])) &
    (df['fecha'] <= pd.to_datetime(date_range[1])) &
    (df['categoria'].isin(categorias))
]

# M√©tricas principales
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        label="üí∞ Ventas Total",
        value=f"${filtered_df['ventas'].sum():,.0f}",
        delta=f"{filtered_df['ventas'].sum() - df['ventas'].mean()*len(filtered_df):,.0f}"
    )

with col2:
    st.metric(
        label="üìà Promedio Ventas",
        value=f"${filtered_df['ventas'].mean():,.0f}",
        delta=f"{filtered_df['ventas'].mean() - df['ventas'].mean():,.0f}"
    )

with col3:
    st.metric(
        label="üìä Registros",
        value=len(filtered_df),
        delta=f"{len(filtered_df) - len(df)}"
    )

with col4:
    st.metric(
        label="‚≠ê Satisfacci√≥n Prom.",
        value=f"{filtered_df['satisfaccion'].mean():.1f}",
        delta=f"{filtered_df['satisfaccion'].mean() - df['satisfaccion'].mean():.1f}"
    )

st.markdown("---")

# Gr√°ficos principales
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà Evoluci√≥n de Ventas")
    fig_line = px.line(
        filtered_df, 
        x='fecha', 
        y='ventas',
        title="Ventas por Fecha"
    )
    st.plotly_chart(fig_line, use_container_width=True)

with col2:
    st.subheader("üè∑Ô∏è Ventas por Categor√≠a")
    ventas_categoria = filtered_df.groupby('categoria')['ventas'].sum().reset_index()
    fig_bar = px.bar(
        ventas_categoria,
        x='categoria',
        y='ventas',
        title="Ventas Totales por Categor√≠a"
    )
    st.plotly_chart(fig_bar, use_container_width=True)

# Segunda fila de gr√°ficos
col3, col4 = st.columns(2)

with col3:
    st.subheader("üó∫Ô∏è Ventas por Regi√≥n")
    fig_pie = px.pie(
        filtered_df,
        values='ventas',
        names='region',
        title="Distribuci√≥n de Ventas por Regi√≥n"
    )
    st.plotly_chart(fig_pie, use_container_width=True)

with col4:
    st.subheader("‚≠ê Distribuci√≥n de Satisfacci√≥n")
    fig_hist = px.histogram(
        filtered_df,
        x='satisfaccion',
        nbins=20,
        title="Distribuci√≥n de Satisfacci√≥n del Cliente"
    )
    st.plotly_chart(fig_hist, use_container_width=True)

# An√°lisis avanzado
st.markdown("---")
st.subheader("üîç An√°lisis Detallado")

tab1, tab2, tab3 = st.tabs(["üìä Estad√≠sticas", "üìà Correlaciones", "üî¢ Datos"])

with tab1:
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Estad√≠sticas Descriptivas - Ventas**")
        st.dataframe(filtered_df['ventas'].describe())
    
    with col2:
        st.write("**Estad√≠sticas Descriptivas - Satisfacci√≥n**")
        st.dataframe(filtered_df['satisfaccion'].describe())

with tab2:
    st.write("**Matriz de Correlaci√≥n**")
    numeric_cols = filtered_df.select_dtypes(include=[np.number]).columns
    corr_matrix = filtered_df[numeric_cols].corr()
    
    fig_corr = px.imshow(
        corr_matrix,
        text_auto=True,
        aspect="auto",
        title="Matriz de Correlaci√≥n"
    )
    st.plotly_chart(fig_corr, use_container_width=True)

with tab3:
    st.write("**Datos Filtrados**")
    st.dataframe(filtered_df)
    
    # Bot√≥n de descarga
    csv = filtered_df.to_csv(index=False)
    st.download_button(
        label="üì• Descargar datos como CSV",
        data=csv,
        file_name='datos_filtrados.csv',
        mime='text/csv'
    )

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <small>
        Dashboard desarrollado para TSCDIA - Instituto Tecnol√≥gico de Santiago del Estero
        </small>
    </div>
    """,
    unsafe_allow_html=True
)
